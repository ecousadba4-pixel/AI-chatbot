import os
import re
import hashlib
import requests
import pymorphy3
import numpy as np
import redis
import json
from flask import Flask, request, jsonify
from flask_cors import CORS
from qdrant_client import QdrantClient
from sentence_transformers import SentenceTransformer
from datetime import datetime
from price_dialog import handle_price_dialog

# ----------------------------
# INIT
# ----------------------------
app = Flask(__name__)
CORS(app)

# ----------------------------
# ENV VARIABLES
# ----------------------------
QDRANT_HOST = os.getenv("QDRANT_HOST", "amvera-karinausadba-run-u4s-ai-chatbot")
QDRANT_PORT = int(os.getenv("QDRANT_PORT", "6333"))
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY", "")
AMVERA_GPT_URL = os.getenv("AMVERA_GPT_URL")
AMVERA_GPT_TOKEN = os.getenv("AMVERA_GPT_TOKEN")
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = int(os.getenv("REDIS_PORT", "6379"))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")
COLLECTIONS = ["hotel_info_v2", "hotel_rooms_v2", "hotel_support_v2"]

# ----------------------------
# CONNECTIONS
# ----------------------------
redis_client = redis.Redis(
    host=REDIS_HOST, port=REDIS_PORT, password=REDIS_PASSWORD, decode_responses=True
)

morph = pymorphy3.MorphAnalyzer()
model = SentenceTransformer("sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")
qdrant_client = QdrantClient(
    host=QDRANT_HOST,
    port=QDRANT_PORT,
    api_key=QDRANT_API_KEY,
    https=False  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –¥–æ–º–µ–Ω–∞ Amvera
)

print(f"‚úÖ Connected to Qdrant at {QDRANT_HOST}:{QDRANT_PORT}")
print(f"‚úÖ Connected to Redis at {REDIS_HOST}:{REDIS_PORT}")
print("üß† Embedding model loaded")

# ----------------------------
# FUNCTIONS
# ----------------------------
def normalize_text(text: str) -> str:
    """–ë–∞–∑–æ–≤–∞—è –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞."""
    words = re.findall(r"[–∞-—è—ëa-z0-9]+", text.lower())
    lemmas = [morph.parse(w)[0].normal_form for w in words]
    return " ".join(lemmas)

def search_all_collections(query_embedding: list, limit: int = 5) -> list:
    """–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—è–º —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    all_results = []
    
    for coll in COLLECTIONS:
        try:
            search = qdrant_client.search(
                collection_name=coll,
                query_vector=query_embedding,
                limit=limit
            )
            for hit in search:
                all_results.append({
                    "collection": coll,
                    "score": hit.score,
                    "text": hit.payload.get("text", "")
                })
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ {coll}: {e}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score (—É–±—ã–≤–∞–Ω–∏–µ)
    all_results.sort(key=lambda x: x["score"], reverse=True)
    return all_results[:limit]

def generate_response(context: str, question: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Amvera GPT‚Äë–º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ Redis."""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ Redis
        cache_key = hashlib.md5(f"{question}:{context}".encode()).hexdigest()
        cached = redis_client.get(cache_key)
        if cached:
            print(f"üéØ –û—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞ Redis")
            return cached
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        headers = {
            "Authorization": f"Bearer {AMVERA_GPT_TOKEN}",
            "Content-Type": "application/json"
        }
        payload = {
            "model": "gpt",
            "messages": [
                {
                    "role": "system", 
                    "content": "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–≥–æ—Ä–æ–¥–Ω–æ–≥–æ –æ—Ç–µ–ª—è —É—Å–∞–¥—å–±—ã '–ß–µ—Ç—ã—Ä–µ –°–µ–∑–æ–Ω–∞'. –û—Ç–≤–µ—á–∞–π –≥–æ—Å—Ç—è–º –∫—Ä–∞—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –≤–µ–∂–ª–∏–≤–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º."
                },
                {
                    "role": "user", 
                    "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n–í–æ–ø—Ä–æ—Å –≥–æ—Å—Ç—è: {question}"
                }
            ]
        }
        
        r = requests.post(AMVERA_GPT_URL, headers=headers, json=payload, timeout=60)
        
        if r.status_code == 200:
            answer = r.json()["choices"][0]["message"]["content"]
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Redis –∫—ç—à (TTL 1 —á–∞—Å = 3600 —Å–µ–∫—É–Ω–¥)
            redis_client.setex(cache_key, 3600, answer)
            print(f"üíæ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫—ç—à Redis")
            return answer
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT API: {r.status_code} - {r.text}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# ----------------------------
# ROUTES
# ----------------------------
@app.route("/api/chat", methods=["POST"])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —á–∞—Ç–∞ —Å –≥–æ—Å—Ç—è–º–∏."""
    data = request.get_json()
    question = data.get("message", "").strip()
    session_id = data.get("session_id") or hashlib.md5(str(datetime.utcnow()).encode()).hexdigest()
    
    if not question:
        return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å."})
    
    print(f"\nüí¨ –í–æ–ø—Ä–æ—Å [{session_id[:8]}]: {question}")
    
    # 1. –ü–†–û–í–ï–†–ö–ê –ù–ê –ö–û–ú–ê–ù–î–´ –°–ë–†–û–°–ê
    if question.lower() in ["–æ—Ç–º–µ–Ω–∞", "—Å–±—Ä–æ—Å", "–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "—Å—Ç–æ–ø", "reset"]:
        # –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        redis_client.delete(f"booking_session:{session_id}")
        return jsonify({
            "response": "–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            "session_id": session_id
        })
    
    # 2. –ü–†–û–í–ï–†–ö–ê –ù–ê –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï/–¶–ï–ù–´
    booking_result = handle_price_dialog(session_id, question, redis_client)
    
    if booking_result:  # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç
        return jsonify({
            "response": booking_result["answer"],
            "session_id": session_id,
            "mode": booking_result.get("mode", "booking")
        })
    
    # 3. –û–ë–´–ß–ù–´–ô –ü–û–¢–û–ö (Qdrant + GPT)
    normalized = normalize_text(question)
    print(f"üìù –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {normalized}")
    
    # –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º numpy array –≤ list
    query_embedding = model.encode(normalized).tolist()
    print(f"üî¢ Embedding —Ä–∞–∑–º–µ—Ä: {len(query_embedding)}")
    
    # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—è–º –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"üîç –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—è–º...")
    all_results = search_all_collections(query_embedding, limit=5)
    
    if not all_results:
        print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!")
        return jsonify({
            "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –Ω–∞—à—ë–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            "session_id": session_id
        })
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Ç–æ–ø-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüìä –¢–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    for i, res in enumerate(all_results, 1):
        print(f"   {i}. [{res['collection']}] score={res['score']:.4f} | text: {res['text'][:100]}...")
    
    context = "\n\n".join([res["text"] for res in all_results[:3]])
    
    if not context.strip():
        print("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è text!")
        return jsonify({
            "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
            "session_id": session_id
        })
    
    print(f"\nüìÑ –ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ({len(context)} —Å–∏–º–≤–æ–ª–æ–≤):\n{context[:300]}...\n")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ Redis)
    answer = generate_response(context, question)
    print(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {answer[:100]}...\n")
    
    return jsonify({
        "response": answer,
        "session_id": session_id,
        "debug_info": {
            "top_collection": all_results[0]["collection"] if all_results else None,
            "top_score": all_results[0]["score"] if all_results else 0,
            "results_count": len(all_results)
        }
    })

@app.route("/api/debug/qdrant", methods=["GET"])
def debug_qdrant():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Qdrant –∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π."""
    try:
        collections = qdrant_client.get_collections().collections
        return jsonify({
            "status": "ok",
            "collections": [c.name for c in collections]
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route("/api/debug/redis", methods=["GET"])
def debug_redis():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redis."""
    try:
        redis_client.ping()
        return jsonify({"status": "ok", "message": "Redis connection active"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route("/api/debug/search", methods=["POST"])
def debug_search():
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞."""
    data = request.get_json()
    question = data.get("message", "").strip()
    
    if not question:
        return jsonify({"error": "message required"})
    
    normalized = normalize_text(question)
    query_embedding = model.encode(normalized).tolist()
    
    results = search_all_collections(query_embedding, limit=10)
    
    return jsonify({
        "question": question,
        "normalized": normalized,
        "results": [
            {
                "collection": r["collection"],
                "score": r["score"],
                "text_preview": r["text"][:200]
            }
            for r in results
        ]
    })

@app.route("/health")
def health():
    """Health check –¥–ª—è Amvera –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    return "OK", 200

@app.route("/")
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API."""
    return jsonify({
        "status": "ok",
        "message": "–£—Å–∞–¥—å–±–∞ '–ß–µ—Ç—ã—Ä–µ –°–µ–∑–æ–Ω–∞' - AI Assistant",
        "version": "3.0",
        "features": ["RAG", "Booking Dialog", "Redis Cache"],
        "endpoints": [
            "/api/chat",
            "/api/debug/qdrant",
            "/api/debug/redis",
            "/api/debug/search",
            "/health"
        ]
    })

# ----------------------------
# ENTRY POINT
# ----------------------------
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)
