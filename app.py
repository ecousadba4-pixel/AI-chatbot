import os
import re
import hashlib
import requests
import pymorphy3
import numpy as np
import redis
from flask import Flask, request, jsonify
from flask_cors import CORS
from qdrant_client import QdrantClient
from sentence_transformers import SentenceTransformer
from datetime import datetime

# ----------------------------
# INIT
# ----------------------------
app = Flask(__name__)
CORS(app)

# ----------------------------
# ENV VARIABLES
# ----------------------------
QDRANT_HOST = os.getenv("QDRANT_HOST", "amvera-karinausadba-run-u4s-ai-chatbot")
QDRANT_PORT = int(os.getenv("QDRANT_PORT", "6333"))
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY", "")
AMVERA_GPT_URL = os.getenv("AMVERA_GPT_URL")
AMVERA_GPT_TOKEN = os.getenv("AMVERA_GPT_TOKEN")
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = int(os.getenv("REDIS_PORT", "6379"))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")
COLLECTIONS = ["hotel_info_v2", "hotel_rooms_v2", "hotel_support_v2"]

# ----------------------------
# CONNECTIONS
# ----------------------------
redis_client = redis.Redis(
    host=REDIS_HOST, port=REDIS_PORT, password=REDIS_PASSWORD, decode_responses=True
)

morph = pymorphy3.MorphAnalyzer()
model = SentenceTransformer("sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")
qdrant_client = QdrantClient(
    host=QDRANT_HOST,
    port=QDRANT_PORT,
    api_key=QDRANT_API_KEY,
    https=False  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –¥–æ–º–µ–Ω–∞ Amvera
)

print(f"‚úÖ Connected to Qdrant at {QDRANT_HOST}:{QDRANT_PORT}")
print(f"‚úÖ Connected to Redis at {REDIS_HOST}:{REDIS_PORT}")
print("üß† Embedding model loaded")

# ----------------------------
# FUNCTIONS
# ----------------------------
def normalize_text(text: str) -> str:
    """–ë–∞–∑–æ–≤–∞—è –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞."""
    words = re.findall(r"[–∞-—è—ëa-z0-9]+", text.lower())
    lemmas = [morph.parse(w)[0].normal_form for w in words]
    return " ".join(lemmas)

def select_collection(query_embedding: np.ndarray) -> str:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –Ω–∞–∏–±–æ–ª—å—à–µ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏."""
    try:
        best_collection = None
        best_score = -1
        for coll in COLLECTIONS:
            search = qdrant_client.search(
                collection_name=coll,
                query_vector=query_embedding,
                limit=1
            )
            if search and search[0].score > best_score:
                best_score = search[0].score
                best_collection = coll
        return best_collection or "hotel_info_v2"
    except Exception as e:
        print(f"‚ö†Ô∏è Collection selection error: {e}")
        return "hotel_info_v2"

def generate_response(context: str, question: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Amvera GPT‚Äë–º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ Redis."""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ Redis
        cache_key = hashlib.md5(f"{question}:{context}".encode()).hexdigest()
        cached = redis_client.get(cache_key)
        if cached:
            print(f"üéØ –û—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞ Redis")
            return cached
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        headers = {
            "Authorization": f"Bearer {AMVERA_GPT_TOKEN}",
            "Content-Type": "application/json"
        }
        payload = {
            "model": "gpt",
            "messages": [
                {
                    "role": "system", 
                    "content": "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–≥–æ—Ä–æ–¥–Ω–æ–≥–æ –æ—Ç–µ–ª—è —É—Å–∞–¥—å–±—ã '–ß–µ—Ç—ã—Ä–µ –°–µ–∑–æ–Ω–∞'. –û—Ç–≤–µ—á–∞–π –≥–æ—Å—Ç—è–º –∫—Ä–∞—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –≤–µ–∂–ª–∏–≤–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º."
                },
                {
                    "role": "user", 
                    "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n–í–æ–ø—Ä–æ—Å –≥–æ—Å—Ç—è: {question}"
                }
            ]
        }
        
        r = requests.post(AMVERA_GPT_URL, headers=headers, json=payload, timeout=60)
        
        if r.status_code == 200:
            answer = r.json()["choices"][0]["message"]["content"]
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Redis –∫—ç—à (TTL 1 —á–∞—Å = 3600 —Å–µ–∫—É–Ω–¥)
            redis_client.setex(cache_key, 3600, answer)
            print(f"üíæ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫—ç—à Redis")
            return answer
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT API: {r.status_code} - {r.text}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# ----------------------------
# ROUTES
# ----------------------------
@app.route("/api/chat", methods=["POST"])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è —á–∞—Ç–∞ —Å –≥–æ—Å—Ç—è–º–∏."""
    data = request.get_json()
    question = data.get("message", "").strip()
    session_id = data.get("session_id") or hashlib.md5(str(datetime.utcnow()).encode()).hexdigest()
    
    if not question:
        return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å."})
    
    print(f"üí¨ –í–æ–ø—Ä–æ—Å [{session_id[:8]}]: {question}")
    
    # 1. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    normalized = normalize_text(question)
    query_embedding = model.encode(normalized)
    
    # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
    collection = select_collection(query_embedding)
    print(f"üéØ –ö–æ–ª–ª–µ–∫—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞: {collection}")
    
    # 3. –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ Qdrant
    search_results = qdrant_client.search(
        collection_name=collection,
        query_vector=query_embedding,
        limit=3
    )
    
    # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    context = "\n".join([hit.payload.get("text", "") for hit in search_results])
    if not context:
        context = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    print(f"üìÑ –ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): {context[:200]}...")
    
    # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ Redis)
    answer = generate_response(context, question)
    
    return jsonify({
        "response": answer,
        "collection": collection,
        "session_id": session_id
    })

@app.route("/api/debug/qdrant", methods=["GET"])
def debug_qdrant():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Qdrant –∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π."""
    try:
        collections = qdrant_client.get_collections().collections
        return jsonify({
            "status": "ok",
            "collections": [c.name for c in collections]
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route("/api/debug/redis", methods=["GET"])
def debug_redis():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redis."""
    try:
        redis_client.ping()
        return jsonify({"status": "ok", "message": "Redis connection active"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route("/health")
def health():
    """Health check –¥–ª—è Amvera –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    return "OK", 200

@app.route("/")
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API."""
    return jsonify({
        "status": "ok",
        "message": "–£—Å–∞–¥—å–±–∞ '–ß–µ—Ç—ã—Ä–µ –°–µ–∑–æ–Ω–∞' - AI Assistant",
        "version": "1.0",
        "endpoints": [
            "/api/chat",
            "/api/debug/qdrant",
            "/api/debug/redis",
            "/health"
        ]
    })

# ----------------------------
# ENTRY POINT
# ----------------------------
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8000)
