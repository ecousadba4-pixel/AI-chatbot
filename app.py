import os
import re
import hashlib
import requests
import pymorphy3
import numpy as np
import redis
import json
from flask import Flask, request, jsonify
from flask_cors import CORS
from qdrant_client import QdrantClient
from qdrant_client.http import models
from datetime import datetime

from embedding_loader import resolve_embedding_model
from price_dialog import handle_price_dialog

# ----------------------------
# INIT
# ----------------------------
app = Flask(__name__)
CORS(app)

# ----------------------------
# ENV VARIABLES
# ----------------------------
DEFAULT_COLLECTIONS = ["hotel_knowledge"]

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–ª–µ–∫—Ü–∏–π –Ω–æ–≤—ã–º. –ü–æ–º–æ–≥–∞–µ—Ç –ø–µ—Ä–µ–∂–∏—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
# –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –º–µ–Ω—è—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
COLLECTION_ALIASES: dict[str, str] = {
    "hotel_ru": "hotel_knowledge",
}


def _normalize_collection_names(names: list[str]) -> list[str]:
    """–ü—Ä–∏–º–µ–Ω—è–µ–º –∞–ª–∏–∞—Å—ã –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫."""

    normalized: list[str] = []
    seen: set[str] = set()

    for name in names:
        target = COLLECTION_ALIASES.get(name, name)
        if target not in seen:
            seen.add(target)
            normalized.append(target)
    return normalized
QDRANT_HOST = os.getenv("QDRANT_HOST", "amvera-karinausadba-run-u4s-ai-chatbot")
QDRANT_PORT = int(os.getenv("QDRANT_PORT", "6333"))
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY", "")
QDRANT_HTTPS = os.getenv("QDRANT_HTTPS", "false").lower() in ("1", "true", "yes")

AMVERA_GPT_URL = os.getenv(
    "AMVERA_GPT_URL", "https://kong-proxy.yc.amvera.ru/api/v1/models/gpt"
)
AMVERA_GPT_MODEL = os.getenv("AMVERA_GPT_MODEL", "gpt-5").strip() or "gpt-5"
AMVERA_GPT_TOKEN = os.getenv("AMVERA_GPT_TOKEN")
AMVERA_AUTH_HEADER = os.getenv("AMVERA_AUTH_HEADER", "X-Auth-Token")
AMVERA_AUTH_PREFIX = os.getenv("AMVERA_AUTH_PREFIX", "Bearer")

REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = int(os.getenv("REDIS_PORT", "6379"))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")

# –°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –∏—â–µ–º
def _load_collections() -> list[str]:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å —É—á—ë—Ç–æ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""

    env_json = os.getenv("COLLECTIONS_JSON")
    if env_json:
        try:
            parsed = json.loads(env_json)
        except json.JSONDecodeError:
            print(
                "‚ö†Ô∏è COLLECTIONS_JSON –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON ‚Äî –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback",
                f"(–∑–Ω–∞—á–µ–Ω–∏–µ: {env_json!r})",
            )
        else:
            if isinstance(parsed, list) and all(isinstance(item, str) for item in parsed):
                normalized = _normalize_collection_names(parsed)
                print(
                    "üîß –ò—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π: COLLECTIONS_JSON ‚Üí",
                    ", ".join(normalized) or "<–ø—É—Å—Ç–æ>",
                )
                return normalized
            print(
                "‚ö†Ô∏è COLLECTIONS_JSON –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫ ‚Äî –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback",
                f"(–∑–Ω–∞—á–µ–Ω–∏–µ: {parsed!r})",
            )

    qdrant_collection = os.getenv("QDRANT_COLLECTION")
    collection_name = os.getenv("COLLECTION_NAME")
    single_collection = qdrant_collection or collection_name
    if single_collection:
        source = "QDRANT_COLLECTION" if qdrant_collection else "COLLECTION_NAME"
        normalized = _normalize_collection_names([single_collection])
        print(
            f"üîß –ò—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {source} ‚Üí",
            ", ".join(normalized) or "<–ø—É—Å—Ç–æ>",
        )
        return normalized

    comma_separated = os.getenv("COLLECTIONS")
    if comma_separated:
        items = [item.strip() for item in comma_separated.split(",") if item.strip()]
        if items:
            normalized = _normalize_collection_names(items)
            print(
                "üîß –ò—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π: COLLECTIONS ‚Üí",
                ", ".join(normalized) or "<–ø—É—Å—Ç–æ>",
            )
            return normalized

    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∞–∫—Ç—É–∞–ª—å–Ω–∞—è –µ–¥–∏–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è)
    normalized = _normalize_collection_names(DEFAULT_COLLECTIONS)
    print(
        "üîß –ò—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π: –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Üí",
        ", ".join(normalized) or "<–ø—É—Å—Ç–æ>",
    )
    return normalized


COLLECTIONS = _load_collections()


def _filter_existing_collections(
    client: QdrantClient,
    requested: list[str],
    fallback: list[str],
) -> list[str]:
    """–£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –ø–æ–¥–±–∏—Ä–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ."""

    try:
        response = client.get_collections()
        available = {collection.name for collection in response.collections}
    except Exception as exc:  # pragma: no cover - —Å–µ—Ç–µ–≤–æ–π —Å–±–æ–π
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏–∑ Qdrant: {exc}")
        return requested

    if not available:
        print("‚ö†Ô∏è –í Qdrant –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
        return requested

    filtered = [name for name in requested if name in available]
    if filtered:
        missing = [name for name in requested if name not in available]
        if missing:
            print(
                "‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: " + ", ".join(sorted(missing))
            )
        return filtered

    fallback_candidates = [name for name in fallback if name in available]
    if not fallback_candidates:
        fallback_candidates = sorted(available)

    print(
        "‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ –∏–∑ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback: "
        + ", ".join(fallback_candidates)
    )
    return fallback_candidates

# ----------------------------
# CONNECTIONS
# ----------------------------
redis_client = redis.Redis(
    host=REDIS_HOST, port=REDIS_PORT, password=REDIS_PASSWORD, decode_responses=True
)

morph = pymorphy3.MorphAnalyzer()

# >>> –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: —Ä—É—Å—Å–∫–∞—è –∫—Ä—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ <<<
# –†–∞–∑–º–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ = 1024
EMBEDDING_MODEL_NAME = os.getenv("EMBEDDING_MODEL_NAME", "sberbank-ai/sbert_large_nlu_ru")
EMBEDDING_MODEL_PATH = os.getenv("EMBEDDING_MODEL_PATH")
ALLOW_EMBEDDING_DOWNLOAD = os.getenv("ALLOW_EMBEDDING_DOWNLOAD", "false").lower() in ("1", "true", "yes")


model = resolve_embedding_model(
    model_name=EMBEDDING_MODEL_NAME,
    candidate_paths=[
        EMBEDDING_MODEL_PATH,
        "/app/data/sberbank-ai/sbert_large_nlu_ru",
        "/data/sberbank-ai/sbert_large_nlu_ru",
    ],
    allow_download=ALLOW_EMBEDDING_DOWNLOAD,
)

qdrant_client = QdrantClient(
    host=QDRANT_HOST,
    port=QDRANT_PORT,
    api_key=QDRANT_API_KEY,
    https=QDRANT_HTTPS  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –¥–æ–º–µ–Ω–∞; –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
)

print(f"‚úÖ Connected to Qdrant at {QDRANT_HOST}:{QDRANT_PORT} (https={QDRANT_HTTPS})")
print(f"‚úÖ Connected to Redis at {REDIS_HOST}:{REDIS_PORT}")
print("üî¢ Embedding dimension:", model.get_sentence_embedding_dimension())
print(f"ü§ñ Amvera GPT endpoint: {AMVERA_GPT_URL} (model={AMVERA_GPT_MODEL})")

COLLECTIONS = _filter_existing_collections(
    qdrant_client,
    COLLECTIONS,
    DEFAULT_COLLECTIONS,
)
print("üìö –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", ", ".join(COLLECTIONS))

# ----------------------------
# HELPERS
# ----------------------------
def normalize_text(text: str) -> str:
    """–ë–∞–∑–æ–≤–∞—è –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è/–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ (RU + –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã)."""
    words = re.findall(r"[–∞-—è—ëa-z0-9]+", text.lower())
    lemmas = [morph.parse(w)[0].normal_form for w in words]
    return " ".join(lemmas)

def encode(text: str) -> list:
    """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —ç–º–±–µ–¥–¥–∏–Ω–≥ (list[float]) –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –º–æ–¥–µ–ª—å—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
    # –í–∞–∂–Ω–æ: –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ Qdrant –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç–º–±–µ–¥–¥–µ–Ω—ã —ç—Ç–æ–π –∂–µ –º–æ–¥–µ–ª—å—é
    vec = model.encode(text)
    if isinstance(vec, np.ndarray):
        vec = vec.tolist()
    return vec

def search_all_collections(query_embedding: list, limit: int = 5) -> list:
    """–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—è–º —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    all_results = []
    for coll in COLLECTIONS:
        try:
            search = qdrant_client.search(
                collection_name=coll,
                query_vector=query_embedding,
                limit=limit
            )
            for hit in search:
                payload = hit.payload or {}
                text = payload.get("text") or payload.get("text_bm25") or ""
                if not text and isinstance(payload.get("raw"), dict):
                    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–±—Ä–∞—Ç—å fallback –∏–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª–µ–π.
                    raw = payload["raw"]
                    text_blocks = raw.get("text_blocks")
                    if isinstance(text_blocks, dict):
                        text = "\n".join(str(v) for v in text_blocks.values() if v)
                    if not text:
                        text = raw.get("text", "")
                    if not text and raw.get("category") == "faq":
                        q = raw.get("question")
                        a = raw.get("answer")
                        if q or a:
                            text = "–í–æ–ø—Ä–æ—Å: {}\n–û—Ç–≤–µ—Ç: {}".format(q or "", a or "")

                all_results.append({
                    "collection": coll,
                    "score": hit.score,
                    "text": text
                })
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ {coll}: {e}")
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score (—É–±—ã–≤–∞–Ω–∏–µ)
    all_results.sort(key=lambda x: x["score"], reverse=True)
    return all_results[:limit]

def _normalize_amvera_token(raw_token: str | None) -> str:
    """–û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω: —É–±—Ä–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å ``Bearer`` –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã."""

    token = (raw_token or "").strip()
    if token.lower().startswith("bearer "):
        token = token[len("bearer ") :].lstrip()
    return token


def _ensure_amvera_token() -> str | None:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ensure_api_key –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏."""

    token = _normalize_amvera_token(AMVERA_GPT_TOKEN)

    if not token:
        print("‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ (AMVERA_GPT_TOKEN)")
        return None

    return token


def _build_amvera_headers(token: str) -> dict[str, str]:
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è–º Amvera."""

    prefix = AMVERA_AUTH_PREFIX.strip()
    if prefix:
        header_value = f"{prefix} {token}"
    else:
        header_value = token

    return {
        AMVERA_AUTH_HEADER: header_value,
        "Content-Type": "application/json",
    }


def _build_amvera_payload(model: str, context: str, question: str) -> dict[str, object]:
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –æ–±—Ä–∞–∑—Ü—É –∏–∑ —É—Ç–∏–ª–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ API."""

    return {
        "model": model,
        "messages": [
            {
                "role": "system",
                "text": (
                    "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–≥–æ—Ä–æ–¥–Ω–æ–≥–æ –æ—Ç–µ–ª—è —É—Å–∞–¥—å–±—ã '–ß–µ—Ç—ã—Ä–µ –°–µ–∑–æ–Ω–∞'. "
                    "–û—Ç–≤–µ—á–∞–π –≥–æ—Å—Ç—è–º –∫—Ä–∞—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. "
                    "–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –≤–µ–∂–ª–∏–≤–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º."
                ),
            },
            {
                "role": "user",
                "text": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n–í–æ–ø—Ä–æ—Å –≥–æ—Å—Ç—è: {question}",
            },
        ],
    }


def _perform_amvera_request(
    url: str,
    token: str,
    payload: dict[str, object],
    timeout: float,
) -> requests.Response:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP-–∑–∞–ø—Ä–æ—Å –∫ Amvera API —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —É—Ç–∏–ª–∏—Ç–µ."""

    headers = _build_amvera_headers(token)
    return requests.post(url, headers=headers, json=payload, timeout=timeout)


def _log_amvera_error(response: requests.Response) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ API —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –ø–æ –æ–±—Ä–∞–∑—Ü—É —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏."""

    print(
        f"–ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π: {response.status_code} {response.reason}",
    )
    try:
        error_json = response.json()
    except ValueError:
        error_json = {"raw": response.text}

    print(json.dumps(error_json, ensure_ascii=False, indent=2))

    if response.status_code == 403:
        print(
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∫–æ–¥ 403 —á–∞—Å—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏. "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ Amvera –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.",
        )


def generate_response(context: str, question: str) -> str:
    """–ó–∞–ø—Ä–æ—Å –≤ Amvera GPT-–º–æ–¥–µ–ª—å + –∫—ç—à Redis."""
    try:
        cache_key = hashlib.md5(f"{question}:{context}".encode()).hexdigest()
        cached = redis_client.get(cache_key)
        if cached:
            print("üéØ –û—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞ Redis")
            return cached

        normalized_token = _ensure_amvera_token()

        if not normalized_token:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        payload = _build_amvera_payload(AMVERA_GPT_MODEL, context, question)

        try:
            response = _perform_amvera_request(
                AMVERA_GPT_URL,
                normalized_token,
                payload,
                timeout=60,
            )
        except requests.RequestException as exc:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Amvera API: {exc}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        if response.ok:
            data = response.json()
            answer = None

            choices = data.get("choices")
            if isinstance(choices, list) and choices:
                first_choice = choices[0]
                if isinstance(first_choice, dict):
                    message = first_choice.get("message") or {}
                    if isinstance(message, dict):
                        answer = (
                            message.get("content")
                            or message.get("text")
                        )

            if not answer:
                answer = data.get("output_text") or data.get("text")

            if not answer:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏")
            redis_client.setex(cache_key, 3600, answer)  # TTL 1 —á–∞—Å
            print("üíæ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫—ç—à Redis")
            return answer

        _log_amvera_error(response)
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# ----------------------------
# ROUTES
# ----------------------------
@app.route("/api/chat", methods=["POST"])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint —á–∞—Ç–∞ —Å –≥–æ—Å—Ç—è–º–∏ (RAG)."""
    data = request.get_json(silent=True) or {}
    question = data.get("message", "").strip()
    session_id = data.get("session_id") or hashlib.md5(str(datetime.utcnow()).encode()).hexdigest()

    if not question:
        return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å."})

    print(f"\nüí¨ –í–æ–ø—Ä–æ—Å [{session_id[:8]}]: {question}")

    # 1) –ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞
    if question.lower() in {"–æ—Ç–º–µ–Ω–∞", "—Å–±—Ä–æ—Å", "–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "—Å—Ç–æ–ø", "reset"}:
        redis_client.delete(f"booking_session:{session_id}")
        return jsonify({
            "response": "–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            "session_id": session_id
        })

    # 2) –î–∏–∞–ª–æ–≥ –ø—Ä–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ/—Ü–µ–Ω—ã (–µ—Å–ª–∏ –º–æ–¥—É–ª—å –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç ‚Äî –æ—Ç–¥–∞–µ–º –µ–≥–æ)
    booking_result = handle_price_dialog(session_id, question, redis_client)
    if booking_result:
        return jsonify({
            "response": booking_result["answer"],
            "session_id": session_id,
            "mode": booking_result.get("mode", "booking")
        })

    # 3) –û–±—ã—á–Ω—ã–π RAG
    normalized = normalize_text(question)
    print(f"üìù –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {normalized}")

    query_embedding = encode(normalized)
    print(f"üî¢ Embedding —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: {len(query_embedding)}")

    print("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º:", ", ".join(COLLECTIONS))
    all_results = search_all_collections(query_embedding, limit=5)

    if not all_results:
        print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
        return jsonify({
            "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –Ω–∞—à—ë–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            "session_id": session_id
        })

    print("\nüìä –¢–æ–ø-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for i, res in enumerate(all_results, 1):
        preview = res["text"][:100].replace("\n", " ")
        print(f"   {i}. [{res['collection']}] score={res['score']:.4f} | {preview}...")

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Ç–æ–ø-3
    context = "\n\n".join([res["text"] for res in all_results[:3]]) or ""
    if not context.strip():
        print("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è payload['text']")
        return jsonify({
            "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
            "session_id": session_id
        })

    print(f"\nüìÑ –ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ({len(context)} —Å–∏–º–≤–æ–ª–æ–≤):\n{context[:300]}...\n")

    answer = generate_response(context, question)
    print(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {answer[:100]}...\n")

    return jsonify({
        "response": answer,
        "session_id": session_id,
        "debug_info": {
            "top_collection": all_results[0]["collection"] if all_results else None,
            "top_score": all_results[0]["score"] if all_results else 0,
            "results_count": len(all_results),
            "embedding_dim": len(query_embedding)
        }
    })

@app.route("/api/debug/qdrant", methods=["GET"])
def debug_qdrant():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Qdrant –∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π."""
    try:
        collections = qdrant_client.get_collections().collections
        return jsonify({
            "status": "ok",
            "collections": [c.name for c in collections]
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route("/api/debug/redis", methods=["GET"])
def debug_redis():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redis."""
    try:
        redis_client.ping()
        return jsonify({"status": "ok", "message": "Redis connection active"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route("/api/debug/search", methods=["POST"])
def debug_search():
    """–û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."""
    data = request.get_json(silent=True) or {}
    question = data.get("message", "").strip()

    if not question:
        return jsonify({"error": "message required"}), 400

    normalized = normalize_text(question)
    vec = encode(normalized)
    results = search_all_collections(vec, limit=10)

    return jsonify({
        "question": question,
        "normalized": normalized,
        "embedding_dim": len(vec),
        "results": [
            {
                "collection": r["collection"],
                "score": r["score"],
                "text_preview": r["text"][:200]
            }
            for r in results
        ]
    })


# –ü–æ–∑–≤–æ–ª—è–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫–∞–∫ –∫ `/api/debug/amvera`, —Ç–∞–∫ –∏ –∫ `/api/debug/amvera/`,
# —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö 404 –∏–∑‚Äë–∑–∞ –æ—Ç–ª–∏—á–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ–∫—Å–∏.
@app.route("/api/debug/amvera", methods=["GET"], strict_slashes=False)
def debug_amvera():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Amvera GPT-–º–æ–¥–µ–ª–∏."""

    prompt = request.args.get("prompt", "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å 'ok'.")
    model_name = request.args.get("model", AMVERA_GPT_MODEL).strip() or AMVERA_GPT_MODEL

    token = _ensure_amvera_token()
    if not token:
        return jsonify(
            {
                "status": "error",
                "message": "–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω (AMVERA_GPT_TOKEN)",
            }
        ), 503

    payload = {
        "model": model_name,
        "messages": [
            {
                "role": "system",
                "text": "–¢—ã ‚Äî –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API.",
            },
            {
                "role": "user",
                "text": prompt,
            },
        ],
    }

    try:
        response = _perform_amvera_request(
            AMVERA_GPT_URL,
            token,
            payload,
            timeout=30,
        )
    except requests.RequestException as exc:
        return (
            jsonify(
                {
                    "status": "error",
                    "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å: {exc}",
                }
            ),
            502,
        )

    if response.ok:
        try:
            response_json = response.json()
        except ValueError:
            response_json = {"raw": response.text}
        return jsonify(
            {
                "status": "ok",
                "model": model_name,
                "prompt": prompt,
                "response": response_json,
            }
        )

    _log_amvera_error(response)
    try:
        error_body = response.json()
    except ValueError:
        error_body = {"raw": response.text}
    return (
        jsonify(
            {
                "status": "error",
                "message": "Amvera API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É",
                "http_status": response.status_code,
                "details": error_body,
            }
        ),
        response.status_code,
    )

@app.route("/api/debug/model", methods=["GET"])
def debug_model():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤."""
    return jsonify({
        "model": EMBEDDING_MODEL_NAME,
        "embedding_dimension": model.get_sentence_embedding_dimension()
    })

@app.route("/health")
def health():
    """Health check."""
    return "OK", 200

# ----------------------------
# ROOT PAGE
# ----------------------------
_DEFAULT_ENDPOINT_ORDER = [
    "/api/chat",
    "/api/debug/qdrant",
    "/api/debug/redis",
    "/api/debug/search",
    "/api/debug/amvera",
    "/api/debug/model",
    "/api/debug/status",
    "/health",
]


def _collect_public_endpoints() -> list[str]:
    """–°–æ–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –±–µ–∑ `static`."""

    collected: dict[str, None] = {}
    for rule in app.url_map.iter_rules():
        if rule.endpoint == "static" or rule.rule == "/":
            continue
        collected.setdefault(rule.rule, None)

    ordered: list[str] = []
    for path in _DEFAULT_ENDPOINT_ORDER:
        if path in collected:
            ordered.append(path)
            collected.pop(path)

    # –î–æ–±–∞–≤–∏–º –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã, –Ω–µ –ø–æ–ø–∞–≤—à–∏–µ –≤ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫.
    ordered.extend(sorted(collected.keys()))
    return ordered


@app.route("/")
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API."""
    return jsonify({
        "status": "ok",
        "message": "–£—Å–∞–¥—å–±–∞ '–ß–µ—Ç—ã—Ä–µ –°–µ–∑–æ–Ω–∞' - AI Assistant",
        "version": "3.1",
        "features": ["RAG", "Booking Dialog", "Redis Cache"],
        "embedding_model": EMBEDDING_MODEL_NAME,
        "embedding_dim": model.get_sentence_embedding_dimension(),
        "endpoints": _collect_public_endpoints(),
    })


@app.route("/api/debug/status", methods=["GET"])
def debug_status():
    """Aggregate status information about external dependencies."""

    services = {}

    # Qdrant status
    try:
        qdrant_client.get_collections()
        services["qdrant"] = {
            "status": "ok",
            "host": QDRANT_HOST,
            "port": QDRANT_PORT,
        }
    except Exception as exc:
        services["qdrant"] = {
            "status": "error",
            "message": str(exc),
            "host": QDRANT_HOST,
            "port": QDRANT_PORT,
        }

    # Redis status
    try:
        redis_client.ping()
        services["redis"] = {
            "status": "ok",
            "host": REDIS_HOST,
            "port": REDIS_PORT,
        }
    except Exception as exc:
        services["redis"] = {
            "status": "error",
            "message": str(exc),
            "host": REDIS_HOST,
            "port": REDIS_PORT,
        }

    # Embedding model status
    try:
        services["embedding_model"] = {
            "status": "ok",
            "name": EMBEDDING_MODEL_NAME,
            "dimension": model.get_sentence_embedding_dimension(),
        }
    except Exception as exc:
        services["embedding_model"] = {
            "status": "error",
            "name": EMBEDDING_MODEL_NAME,
            "message": str(exc),
        }

    if AMVERA_GPT_URL:
        services["amvera_gpt"] = {
            "status": "configured",
            "url": AMVERA_GPT_URL,
        }
    else:
        services["amvera_gpt"] = {
            "status": "not_configured",
        }

    overall_status = "ok" if all(s.get("status") != "error" for s in services.values()) else "degraded"

    return jsonify({
        "status": overall_status,
        "services": services,
    })

# ----------------------------
# ENTRY POINT
# ----------------------------
if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: host=0.0.0.0, –ø–æ—Ä—Ç –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ PORT
    port = int(os.getenv("PORT", "8000"))
    app.run(host="0.0.0.0", port=port)

