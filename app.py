import json
import os
import re
import hashlib
from datetime import datetime
from typing import Any, Iterable

import numpy as np
import pymorphy3
import redis
import requests
from flask import Flask, jsonify, request
from flask_cors import CORS
from qdrant_client import QdrantClient

from embedding_loader import resolve_embedding_model
from price_dialog import handle_price_dialog

# ----------------------------
# INIT
# ----------------------------
app = Flask(__name__)
CORS(app)

# ----------------------------
# ENV VARIABLES
# ----------------------------
DEFAULT_COLLECTIONS = ["hotel_knowledge"]
COLLECTIONS = DEFAULT_COLLECTIONS.copy()
ERROR_MESSAGE = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
QDRANT_HOST = os.getenv("QDRANT_HOST")
QDRANT_PORT = int(os.getenv("QDRANT_PORT"))
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY", "")

_qdrant_https_raw = os.getenv("QDRANT_HTTPS")
if _qdrant_https_raw is None:
    raise RuntimeError(
        "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è QDRANT_HTTPS –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
    )
QDRANT_HTTPS = _qdrant_https_raw.lower() in ("1", "true", "yes")

AMVERA_GPT_URL = os.getenv("AMVERA_GPT_URL")
if not AMVERA_GPT_URL:
    raise RuntimeError(
        "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è AMVERA_GPT_URL –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
    )
AMVERA_GPT_MODEL = os.getenv("AMVERA_GPT_MODEL")
AMVERA_GPT_TOKEN = os.getenv("AMVERA_GPT_TOKEN")
AMVERA_AUTH_HEADER = "X-Auth-Token"
AMVERA_AUTH_PREFIX = "Bearer"

REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = int(os.getenv("REDIS_PORT"))

def _filter_existing_collections(
    client: QdrantClient,
    requested: list[str],
    fallback: list[str],
) -> list[str]:
    """–£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –ø–æ–¥–±–∏—Ä–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ."""

    try:
        response = client.get_collections()
        available = {collection.name for collection in response.collections}
    except Exception as exc:  # pragma: no cover - —Å–µ—Ç–µ–≤–æ–π —Å–±–æ–π
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏–∑ Qdrant: {exc}")
        return requested

    if not available:
        print("‚ö†Ô∏è –í Qdrant –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
        return requested

    filtered = [name for name in requested if name in available]
    if filtered:
        missing = [name for name in requested if name not in available]
        if missing:
            print(
                "‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: " + ", ".join(sorted(missing))
            )
        return filtered

    fallback_candidates = [name for name in fallback if name in available]
    if not fallback_candidates:
        fallback_candidates = sorted(available)

    print(
        "‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ –∏–∑ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback: "
        + ", ".join(fallback_candidates)
    )
    return fallback_candidates

# ----------------------------
# CONNECTIONS
# ----------------------------
redis_client = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, decode_responses=True)

morph = pymorphy3.MorphAnalyzer()

# >>> –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: —Ä—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ <<<
EMBEDDING_MODEL_NAME = os.getenv("EMBEDDING_MODEL_NAME")
if not EMBEDDING_MODEL_NAME:
    raise RuntimeError(
        "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è EMBEDDING_MODEL_NAME –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
    )


model = resolve_embedding_model(
    model_name=EMBEDDING_MODEL_NAME,
    allow_download=True,
)

qdrant_client = QdrantClient(
    host=QDRANT_HOST,
    port=QDRANT_PORT,
    api_key=QDRANT_API_KEY,
    https=QDRANT_HTTPS,
)

print(f"‚úÖ Connected to Qdrant at {QDRANT_HOST}:{QDRANT_PORT} (https={QDRANT_HTTPS})")
print(f"‚úÖ Connected to Redis at {REDIS_HOST}:{REDIS_PORT}")
print("üî¢ Embedding dimension:", model.get_sentence_embedding_dimension())
print(f"ü§ñ Amvera GPT endpoint: {AMVERA_GPT_URL} (model={AMVERA_GPT_MODEL})")

COLLECTIONS = _filter_existing_collections(
    qdrant_client,
    COLLECTIONS,
    DEFAULT_COLLECTIONS,
)
print("üìö –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", ", ".join(COLLECTIONS))

# ----------------------------
# HELPERS
# ----------------------------
def normalize_text(text: str) -> str:
    """–ë–∞–∑–æ–≤–∞—è –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è/–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ (RU + –ª–∞—Ç–∏–Ω–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã)."""
    words = re.findall(r"[–∞-—è—ëa-z0-9]+", text.lower())
    lemmas = [morph.parse(w)[0].normal_form for w in words]
    return " ".join(lemmas)

def encode(text: str) -> list:
    """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —ç–º–±–µ–¥–¥–∏–Ω–≥ (list[float]) –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –º–æ–¥–µ–ª—å—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
    # –í–∞–∂–Ω–æ: –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ Qdrant –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç–º–±–µ–¥–¥–µ–Ω—ã —ç—Ç–æ–π –∂–µ –º–æ–¥–µ–ª—å—é
    vec = model.encode(text)
    if isinstance(vec, np.ndarray):
        vec = vec.tolist()
    return vec

def _extract_payload_text(payload: dict[str, Any]) -> str:
    """–ò–∑–≤–ª–µ—á—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Qdrant."""

    text = payload.get("text") or payload.get("text_bm25") or ""
    if text:
        return text

    raw = payload.get("raw")
    if isinstance(raw, dict):
        text_blocks = raw.get("text_blocks")
        if isinstance(text_blocks, dict):
            combined = "\n".join(str(v) for v in text_blocks.values() if v)
            if combined:
                return combined

        raw_text = raw.get("text")
        if raw_text:
            return raw_text

        if raw.get("category") == "faq":
            question = raw.get("question") or ""
            answer = raw.get("answer") or ""
            if question or answer:
                return f"–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç: {answer}"

    return ""


def search_all_collections(query_embedding: Iterable[float], limit: int = 5) -> list[dict[str, Any]]:
    """–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—è–º —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""

    aggregated: list[dict[str, Any]] = []
    embedding_vector = list(query_embedding)

    for coll in COLLECTIONS:
        try:
            search = qdrant_client.search(
                collection_name=coll,
                query_vector=embedding_vector,
                limit=limit,
            )
        except Exception as exc:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ {coll}: {exc}")
            continue

        for hit in search:
            payload = hit.payload or {}
            aggregated.append(
                {
                    "collection": coll,
                    "score": hit.score,
                    "text": _extract_payload_text(payload),
                }
            )

    aggregated.sort(key=lambda item: item["score"], reverse=True)
    return aggregated[:limit]

def _normalize_amvera_token(raw_token: str | None) -> str:
    """–û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω: —É–±—Ä–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å ``Bearer`` –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã."""

    token = (raw_token or "").strip()
    if token.lower().startswith("bearer "):
        token = token[len("bearer ") :].lstrip()
    return token


def _ensure_amvera_token() -> str | None:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ensure_api_key –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏."""

    token = _normalize_amvera_token(AMVERA_GPT_TOKEN)

    if not token:
        print("‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ (AMVERA_GPT_TOKEN)")
        return None

    return token


def _build_amvera_headers(token: str) -> dict[str, str]:
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è–º Amvera."""

    prefix = AMVERA_AUTH_PREFIX.strip()
    if prefix:
        header_value = f"{prefix} {token}"
    else:
        header_value = token

    return {
        AMVERA_AUTH_HEADER: header_value,
        "Content-Type": "application/json",
    }


def _build_amvera_payload(model: str, context: str, question: str) -> dict[str, object]:
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –æ–±—Ä–∞–∑—Ü—É –∏–∑ —É—Ç–∏–ª–∏—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ API."""

    return {
        "model": model,
        "messages": [
            {
                "role": "system",
                "text": (
                    "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–≥–æ—Ä–æ–¥–Ω–æ–≥–æ –æ—Ç–µ–ª—è —É—Å–∞–¥—å–±—ã '–ß–µ—Ç—ã—Ä–µ –°–µ–∑–æ–Ω–∞'. "
                    "–û—Ç–≤–µ—á–∞–π –≥–æ—Å—Ç—è–º –∫—Ä–∞—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. "
                    "–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –≤–µ–∂–ª–∏–≤–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º."
                ),
            },
            {
                "role": "user",
                "text": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n–í–æ–ø—Ä–æ—Å –≥–æ—Å—Ç—è: {question}",
            },
        ],
    }


def _perform_amvera_request(
    url: str,
    token: str,
    payload: dict[str, object],
    timeout: float,
) -> requests.Response:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP-–∑–∞–ø—Ä–æ—Å –∫ Amvera API —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —É—Ç–∏–ª–∏—Ç–µ."""

    headers = _build_amvera_headers(token)
    return requests.post(url, headers=headers, json=payload, timeout=timeout)


def _log_amvera_error(response: requests.Response) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ API —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –ø–æ –æ–±—Ä–∞–∑—Ü—É —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏."""

    print(
        f"–ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π: {response.status_code} {response.reason}",
    )
    try:
        error_json = response.json()
    except ValueError:
        error_json = {"raw": response.text}

    print(json.dumps(error_json, ensure_ascii=False, indent=2))

    if response.status_code == 403:
        print(
            "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∫–æ–¥ 403 —á–∞—Å—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏. "
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ Amvera –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.",
        )


def _extract_amvera_answer(data: dict[str, Any]) -> str:
    """–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –¥–æ—Å—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ Amvera."""

    choices = data.get("choices")
    if isinstance(choices, list) and choices:
        first_choice = choices[0]
        if isinstance(first_choice, dict):
            message = first_choice.get("message") or {}
            if isinstance(message, dict):
                answer = message.get("content") or message.get("text")
                if answer:
                    return str(answer)

    fallback = data.get("output_text") or data.get("text")
    if isinstance(fallback, str) and fallback.strip():
        return fallback

    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏")


def generate_response(context: str, question: str) -> str:
    """–ó–∞–ø—Ä–æ—Å –≤ Amvera GPT-–º–æ–¥–µ–ª—å + –∫—ç—à Redis."""

    try:
        cache_key = hashlib.md5(f"{question}:{context}".encode()).hexdigest()
        cached = redis_client.get(cache_key)
        if cached:
            print("üéØ –û—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞ Redis")
            return cached

        normalized_token = _ensure_amvera_token()
        if not normalized_token:
            return ERROR_MESSAGE

        payload = _build_amvera_payload(AMVERA_GPT_MODEL, context, question)

        try:
            response = _perform_amvera_request(
                AMVERA_GPT_URL,
                normalized_token,
                payload,
                timeout=60,
            )
        except requests.RequestException as exc:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Amvera API: {exc}")
            return ERROR_MESSAGE

        if not response.ok:
            _log_amvera_error(response)
            return ERROR_MESSAGE

        try:
            data = response.json()
        except ValueError:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç Amvera –∫–∞–∫ JSON")
            return ERROR_MESSAGE

        try:
            answer = _extract_amvera_answer(data)
        except ValueError as exc:
            print(f"‚ö†Ô∏è {exc}")
            return ERROR_MESSAGE

        try:
            redis_client.setex(cache_key, 3600, answer)  # TTL 1 —á–∞—Å
        except Exception as exc:  # pragma: no cover - —Å–±–æ–π Redis –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ Redis: {exc}")
        else:
            print("üíæ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫—ç—à Redis")
        return answer
    except Exception as exc:  # pragma: no cover - –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏: {exc}")
        return ERROR_MESSAGE

# ----------------------------
# ROUTES
# ----------------------------
@app.route("/api/chat", methods=["POST"])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint —á–∞—Ç–∞ —Å –≥–æ—Å—Ç—è–º–∏ (RAG)."""
    data = request.get_json(silent=True) or {}
    question = data.get("message", "").strip()
    session_id = data.get("session_id") or hashlib.md5(str(datetime.utcnow()).encode()).hexdigest()

    if not question:
        return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å."})

    print(f"\nüí¨ –í–æ–ø—Ä–æ—Å [{session_id[:8]}]: {question}")

    # 1) –ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞
    if question.lower() in {"–æ—Ç–º–µ–Ω–∞", "—Å–±—Ä–æ—Å", "–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "—Å—Ç–æ–ø", "reset"}:
        redis_client.delete(f"booking_session:{session_id}")
        return jsonify({
            "response": "–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            "session_id": session_id
        })

    # 2) –î–∏–∞–ª–æ–≥ –ø—Ä–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ/—Ü–µ–Ω—ã (–µ—Å–ª–∏ –º–æ–¥—É–ª—å –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç ‚Äî –æ—Ç–¥–∞–µ–º –µ–≥–æ)
    booking_result = handle_price_dialog(session_id, question, redis_client)
    if booking_result:
        return jsonify({
            "response": booking_result["answer"],
            "session_id": session_id,
            "mode": booking_result.get("mode", "booking")
        })

    # 3) –û–±—ã—á–Ω—ã–π RAG
    normalized = normalize_text(question)
    print(f"üìù –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: {normalized}")

    query_embedding = encode(normalized)
    print(f"üî¢ Embedding —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: {len(query_embedding)}")

    print("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º:", ", ".join(COLLECTIONS))
    all_results = search_all_collections(query_embedding, limit=5)

    if not all_results:
        print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
        return jsonify({
            "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –Ω–∞—à—ë–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            "session_id": session_id
        })

    print("\nüìä –¢–æ–ø-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for i, res in enumerate(all_results, 1):
        preview = res["text"][:100].replace("\n", " ")
        print(f"   {i}. [{res['collection']}] score={res['score']:.4f} | {preview}...")

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Ç–æ–ø-3
    context = "\n\n".join([res["text"] for res in all_results[:3]]) or ""
    if not context.strip():
        print("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è payload['text']")
        return jsonify({
            "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
            "session_id": session_id
        })

    print(f"\nüìÑ –ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ({len(context)} —Å–∏–º–≤–æ–ª–æ–≤):\n{context[:300]}...\n")

    answer = generate_response(context, question)
    print(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {answer[:100]}...\n")

    return jsonify({
        "response": answer,
        "session_id": session_id,
        "debug_info": {
            "top_collection": all_results[0]["collection"] if all_results else None,
            "top_score": all_results[0]["score"] if all_results else 0,
            "results_count": len(all_results),
            "embedding_dim": len(query_embedding)
        }
    })

@app.route("/api/debug/qdrant", methods=["GET"])
def debug_qdrant():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Qdrant –∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π."""
    try:
        collections = qdrant_client.get_collections().collections
        return jsonify({
            "status": "ok",
            "collections": [c.name for c in collections]
        })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route("/api/debug/redis", methods=["GET"])
def debug_redis():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redis."""
    try:
        redis_client.ping()
        return jsonify({"status": "ok", "message": "Redis connection active"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

@app.route("/api/debug/search", methods=["POST"])
def debug_search():
    """–û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."""
    data = request.get_json(silent=True) or {}
    question = data.get("message", "").strip()

    if not question:
        return jsonify({"error": "message required"}), 400

    normalized = normalize_text(question)
    vec = encode(normalized)
    results = search_all_collections(vec, limit=10)

    return jsonify({
        "question": question,
        "normalized": normalized,
        "embedding_dim": len(vec),
        "results": [
            {
                "collection": r["collection"],
                "score": r["score"],
                "text_preview": r["text"][:200]
            }
            for r in results
        ]
    })


# –ü–æ–∑–≤–æ–ª—è–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫–∞–∫ –∫ `/api/debug/amvera`, —Ç–∞–∫ –∏ –∫ `/api/debug/amvera/`,
# —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö 404 –∏–∑‚Äë–∑–∞ –æ—Ç–ª–∏—á–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ–∫—Å–∏.
@app.route("/api/debug/amvera", methods=["GET"], strict_slashes=False)
def debug_amvera():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Amvera GPT-–º–æ–¥–µ–ª–∏."""

    prompt = request.args.get("prompt", "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å 'ok'.")
    model_name = request.args.get("model", AMVERA_GPT_MODEL).strip() or AMVERA_GPT_MODEL

    token = _ensure_amvera_token()
    if not token:
        return jsonify(
            {
                "status": "error",
                "message": "–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω (AMVERA_GPT_TOKEN)",
            }
        ), 503

    payload = {
        "model": model_name,
        "messages": [
            {
                "role": "system",
                "text": "–¢—ã ‚Äî –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API.",
            },
            {
                "role": "user",
                "text": prompt,
            },
        ],
    }

    try:
        response = _perform_amvera_request(
            AMVERA_GPT_URL,
            token,
            payload,
            timeout=30,
        )
    except requests.RequestException as exc:
        return (
            jsonify(
                {
                    "status": "error",
                    "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å: {exc}",
                }
            ),
            502,
        )

    if response.ok:
        try:
            response_json = response.json()
        except ValueError:
            response_json = {"raw": response.text}
        return jsonify(
            {
                "status": "ok",
                "model": model_name,
                "prompt": prompt,
                "response": response_json,
            }
        )

    _log_amvera_error(response)
    try:
        error_body = response.json()
    except ValueError:
        error_body = {"raw": response.text}
    return (
        jsonify(
            {
                "status": "error",
                "message": "Amvera API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É",
                "http_status": response.status_code,
                "details": error_body,
            }
        ),
        response.status_code,
    )

@app.route("/api/debug/model", methods=["GET"])
def debug_model():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤."""
    return jsonify({
        "model": EMBEDDING_MODEL_NAME,
        "embedding_dimension": model.get_sentence_embedding_dimension()
    })

@app.route("/health")
def health():
    """Health check."""
    return "OK", 200

# ----------------------------
# ROOT PAGE
# ----------------------------
_DEFAULT_ENDPOINT_ORDER = [
    "/api/chat",
    "/api/debug/qdrant",
    "/api/debug/redis",
    "/api/debug/search",
    "/api/debug/amvera",
    "/api/debug/model",
    "/api/debug/status",
    "/health",
]


def _collect_public_endpoints() -> list[str]:
    """–°–æ–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –±–µ–∑ `static`."""

    collected: dict[str, None] = {}
    for rule in app.url_map.iter_rules():
        if rule.endpoint == "static" or rule.rule == "/":
            continue
        collected.setdefault(rule.rule, None)

    ordered: list[str] = []
    for path in _DEFAULT_ENDPOINT_ORDER:
        if path in collected:
            ordered.append(path)
            collected.pop(path)

    # –î–æ–±–∞–≤–∏–º –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã, –Ω–µ –ø–æ–ø–∞–≤—à–∏–µ –≤ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫.
    ordered.extend(sorted(collected.keys()))
    return ordered


@app.route("/")
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API."""
    return jsonify({
        "status": "ok",
        "message": "–£—Å–∞–¥—å–±–∞ '–ß–µ—Ç—ã—Ä–µ –°–µ–∑–æ–Ω–∞' - AI Assistant",
        "version": "3.1",
        "features": ["RAG", "Booking Dialog", "Redis Cache"],
        "embedding_model": EMBEDDING_MODEL_NAME,
        "embedding_dim": model.get_sentence_embedding_dimension(),
        "endpoints": _collect_public_endpoints(),
    })


@app.route("/api/debug/status", methods=["GET"])
def debug_status():
    """Aggregate status information about external dependencies."""

    services = {}

    # Qdrant status
    try:
        qdrant_client.get_collections()
        services["qdrant"] = {
            "status": "ok",
            "host": QDRANT_HOST,
            "port": QDRANT_PORT,
        }
    except Exception as exc:
        services["qdrant"] = {
            "status": "error",
            "message": str(exc),
            "host": QDRANT_HOST,
            "port": QDRANT_PORT,
        }

    # Redis status
    try:
        redis_client.ping()
        services["redis"] = {
            "status": "ok",
            "host": REDIS_HOST,
            "port": REDIS_PORT,
        }
    except Exception as exc:
        services["redis"] = {
            "status": "error",
            "message": str(exc),
            "host": REDIS_HOST,
            "port": REDIS_PORT,
        }

    # Embedding model status
    try:
        services["embedding_model"] = {
            "status": "ok",
            "name": EMBEDDING_MODEL_NAME,
            "dimension": model.get_sentence_embedding_dimension(),
        }
    except Exception as exc:
        services["embedding_model"] = {
            "status": "error",
            "name": EMBEDDING_MODEL_NAME,
            "message": str(exc),
        }

    if AMVERA_GPT_URL:
        services["amvera_gpt"] = {
            "status": "configured",
            "url": AMVERA_GPT_URL,
        }
    else:
        services["amvera_gpt"] = {
            "status": "not_configured",
        }

    overall_status = "ok" if all(s.get("status") != "error" for s in services.values()) else "degraded"

    return jsonify({
        "status": overall_status,
        "services": services,
    })

# ----------------------------
# ENTRY POINT
# ----------------------------
if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: host=0.0.0.0, –ø–æ—Ä—Ç –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ PORT
    port = int(os.getenv("PORT", "8000"))
    app.run(host="0.0.0.0", port=port)

