import os
import uuid
import time
from datetime import datetime, timedelta
from qdrant_client import QdrantClient
from qdrant_client.http import models
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env ‚Äî –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–∞ Amvera ENV –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
load_dotenv()

QDRANT_HOST = os.getenv("QDRANT_HOST", "amvera-karinausadba-run-u4s-ai-chatbot")
QDRANT_PORT = int(os.getenv("QDRANT_PORT", "6333"))
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY", "")
COLLECTION_NAME = "chat_sessions"

client = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
def connect_qdrant(retries=5, delay=5):
    global client
    for attempt in range(1, retries + 1):
        try:
            client = QdrantClient(
                host=QDRANT_HOST,
                port=QDRANT_PORT,
                api_key=QDRANT_API_KEY,
                https=False,  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è Amvera
            )
            client.get_collections()  # —Ç–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
            print(f"‚úÖ Qdrant –¥–æ—Å—Ç—É–ø–µ–Ω ({QDRANT_HOST}:{QDRANT_PORT})")
            return
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Qdrant (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}): {e}")
            time.sleep(delay)
    print("‚ùå Qdrant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")

connect_qdrant()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
def init_collection():
    if not client:
        print("‚ö†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞ ‚Äî –∫–ª–∏–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return
    try:
        collections = [c.name for c in client.get_collections().collections]
        if COLLECTION_NAME not in collections:
            client.create_collection(
                collection_name=COLLECTION_NAME,
                vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE),
            )
            print(f"üì¶ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è {COLLECTION_NAME}")
        else:
            print(f"‚ÑπÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è {COLLECTION_NAME} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")

init_collection()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_or_create_session(session_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not client:
        return {"session_id": session_id, "messages": []}
    try:
        scroll_result = client.scroll(
            collection_name=COLLECTION_NAME,
            scroll_filter=models.Filter(
                must=[models.FieldCondition(key="session_id", match=models.MatchValue(value=session_id))]
            ),
            limit=1,
        )
        if scroll_result and scroll_result[0]:
            return scroll_result[0][0].payload
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–µ—Å—Å–∏–∏ –≤ Qdrant: {e}")
    return {"session_id": session_id, "messages": []}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
def save_message(session_id, role, text):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ Qdrant."""
    if not client:
        return
    try:
        payload = {
            "session_id": session_id,
            "message_id": str(uuid.uuid4()),
            "role": role,
            "text": text,
            "timestamp": datetime.utcnow().isoformat()
        }
        client.upsert(
            collection_name=COLLECTION_NAME,
            points=[
                models.PointStruct(
                    id=uuid.uuid4().int & (1 << 63) - 1,
                    vector=[0.0] * 768,
                    payload=payload
                )
            ]
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def get_recent_messages(session_id, limit=10):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Qdrant."""
    if not client:
        return []
    try:
        scroll_result = client.scroll(
            collection_name=COLLECTION_NAME,
            scroll_filter=models.Filter(
                must=[models.FieldCondition(key="session_id", match=models.MatchValue(value=session_id))]
            ),
            limit=limit,
        )
        messages = [r.payload for r in scroll_result[0]]
        return sorted(messages, key=lambda x: x.get("timestamp", ""))
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return []

# –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
def clear_session(session_id):
    if not client:
        return
    try:
        client.delete(
            collection_name=COLLECTION_NAME,
            points_selector=models.FilterSelector(
                filter=models.Filter(
                    must=[models.FieldCondition(key="session_id", match=models.MatchValue(value=session_id))]
                )
            ),
        )
        print(f"üßπ –°–µ—Å—Å–∏—è {session_id} –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–µ—Å—Å–∏–∏: {e}")

