import os
import uuid
import time
from datetime import datetime
from qdrant_client import QdrantClient
from qdrant_client.http import models
from dotenv import load_dotenv


# =================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===================
load_dotenv()
QDRANT_HOST = os.getenv("QDRANT_HOST", "amvera-karinausadba-run-u4s-ai-chatbot")
QDRANT_PORT = int(os.getenv("QDRANT_PORT", "6333"))
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY", "")
COLLECTION_NAME = "chat_sessions"


# =================== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Qdrant ===================
class QdrantConnection:
    def __init__(self):
        self.client = None
        self.reconnect()

    def reconnect(self, retries=10, delay=3):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Qdrant, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è."""
        for attempt in range(1, retries + 1):
            try:
                self.client = QdrantClient(
                    host=QDRANT_HOST,
                    port=QDRANT_PORT,
                    api_key=QDRANT_API_KEY,
                    https=False  # –∫–ª—é—á–µ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Amvera!
                )
                self.client.get_collections()
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Qdrant ({QDRANT_HOST}:{QDRANT_PORT})")
                return True
            except Exception as e:
                print(f"‚ö†Ô∏è Qdrant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}): {e}")
                time.sleep(delay)
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Qdrant –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ ‚Äî RAG –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
        return False

    def ensure_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º."""
        try:
            self.client.get_collections()
        except Exception:
            print("üîÑ –ü–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è c Qdrant, –ø—Ä–æ–±—É—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...")
            self.reconnect()


qdrant_conn = QdrantConnection()
client = qdrant_conn.client


# =================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ===================
def init_collection():
    try:
        qdrant_conn.ensure_connection()
        collections = [c.name for c in client.get_collections().collections]
        if COLLECTION_NAME not in collections:
            client.create_collection(
                collection_name=COLLECTION_NAME,
                vectors_config=models.VectorParams(size=768, distance=models.Distance.COSINE)
            )
            print(f"üì¶ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è {COLLECTION_NAME}")
        else:
            print(f"‚ÑπÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è {COLLECTION_NAME} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")


init_collection()


# =================== –†–∞–±–æ—Ç–∞ —Å —Å–µ—Å—Å–∏—è–º–∏ ===================
def get_or_create_session(session_id):
    """–ù–∞—Ö–æ–¥–∏—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        qdrant_conn.ensure_connection()
        scroll_result = client.scroll(
            collection_name=COLLECTION_NAME,
            scroll_filter=models.Filter(
                must=[models.FieldCondition(key="session_id", match=models.MatchValue(value=session_id))]
            ),
            limit=1
        )
        if scroll_result and scroll_result[0]:
            return scroll_result[0][0].payload
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–µ—Å—Å–∏–∏: {e}")
    return {"session_id": session_id, "messages": []}


def save_message(session_id, role, text):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (user / bot) –≤ Qdrant."""
    try:
        qdrant_conn.ensure_connection()
        payload = {
            "session_id": session_id,
            "message_id": str(uuid.uuid4()),
            "role": role,
            "text": text,
            "timestamp": datetime.utcnow().isoformat()
        }
        client.upsert(
            collection_name=COLLECTION_NAME,
            points=[
                models.PointStruct(
                    id=int(uuid.uuid4().int & (1 << 63) - 1),
                    vector=[0.0] * 768,
                    payload=payload
                )
            ]
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def get_recent_messages(session_id, limit=10):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        qdrant_conn.ensure_connection()
        scroll_result = client.scroll(
            collection_name=COLLECTION_NAME,
            scroll_filter=models.Filter(
                must=[models.FieldCondition(key="session_id", match=models.MatchValue(value=session_id))]
            ),
            limit=limit
        )
        results = [r.payload for r in scroll_result[0]]
        return sorted(results, key=lambda x: x.get("timestamp", ""))
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return []


def clear_session(session_id):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
    try:
        qdrant_conn.ensure_connection()
        client.delete(
            collection_name=COLLECTION_NAME,
            points_selector=models.FilterSelector(
                filter=models.Filter(
                    must=[models.FieldCondition(key="session_id", match=models.MatchValue(value=session_id))]
                )
            )
        )
        print(f"üßπ –°–µ—Å—Å–∏—è {session_id} –æ—á–∏—â–µ–Ω–∞.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–µ—Å—Å–∏–∏: {e}")


